mem = {"a": 0, "b": 0, "c": 0, "d": 0}
# mem = {"a":0, "b":0, "c":1, "d":0}
registers = mem.keys()


def is_register(regs):
    def reg_check(reg):
        if reg in registers:
            return True
        return False

    for reg in regs:
        if reg_check(reg) == False:
            return False
    return True


def cpy(x, y):
    if not is_register(y) and (not is_register(x) and type(x) is not int):
        return -1

    global mem

    if type(x) is int:
        mem[y] = x
    else:
        mem[y] = mem[x]


def inc(x):
    if not is_register(x):
        return -1

    global mem
    mem[x] += 1


def dec(x):
    if not is_register(x):
        return -1

    global mem
    mem[x] -= 1


def jnz(x, y):
    try:
        val = int(x)
    except:
        val = x

    if type(val) is int:
        if val == 0:
            return 1
        else:
            return y
    if mem[val] != 0:
        return y
    else:
        return 1


def parse(cmd):
    cmd = cmd.split(" ")

    if cmd[0] == "cpy":
        try:
            val = int(cmd[1])
        except:
            val = cmd[1]
        return ("cpy", cpy(val, cmd[2]))

    elif cmd[0] == "inc":
        return ("inc", inc(cmd[1]))

    elif cmd[0] == "dec":
        return ("dec", dec(cmd[1]))

    else:
        return ("jnz", jnz(cmd[1], int(cmd[2])))


def run_inst(cmd, i=0):
    if len(inp) < 1:
        return None

    if len(cmd) == 0:
        return None
    # print i, "->", cmd
    chk = parse(cmd)
    # print mem
    if chk[0] == "jnz":
        return i + int(chk[1])


if __name__ == "__main__":
    inp = """cpy 1 a
cpy 1 b
cpy 26 d
jnz c 2
jnz 1 5
cpy 7 c
inc d
dec c
jnz c -2
cpy a c
inc a
dec b
jnz b -2
cpy c b
dec d
jnz d -6
cpy 16 c
cpy 12 d
inc a
dec d
jnz d -2
dec c
jnz c -5"""

    inp = inp.split("\n")
    i = 0
    while i < len(inp):

        value = run_inst(inp[i], i)

        if "jnz" in inp[i]:
            i = value
            if len(inp) <= i - 1:
                break
        else:
            i += 1

    print ">>>", mem["a"]
